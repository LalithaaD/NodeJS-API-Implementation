{
	"info": {
		"_postman_id": "8387296a-e8ed-4bda-9abc-8d5cc5437cc1",
		"name": "NodeJS-Orders API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33511578"
	},
	"item": [
		{
			"name": "GET Order API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain orders\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    // Check if response is an array\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Order API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 201 (Created)\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Test for response type JSON\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response structure and content\r",
							"pm.test(\"Response should contain new order details\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData).to.have.property(\"products\").that.is.an(\"array\").with.lengthOf.at.least(1);\r",
							"    pm.expect(jsonData).to.have.property(\"user\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"totalPrice\").that.is.a(\"number\");\r",
							"    pm.expect(jsonData).to.have.property(\"shippingAddress\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData).to.have.property(\"orderDate\").that.is.a(\"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"products\": [\"6123456789abcdef01234567\", \"abcdef012345678901234567\"],\r\n    \"user\": \"abcdef012345678901234567\",\r\n    \"totalPrice\": 100.50,\r\n    \"shippingAddress\": \"1234 Main St, City, Country\",\r\n    \"orderDate\": \"2024-03-29T10:00:00Z\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Order API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"// Test for response type JSON\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response structure and content\r",
							"pm.test(\"Response should contain updated user details\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"products\": [\"6123456789abcdef01234567\", \"abcdef012345678901234567\"],\r\n    \"user\": \"abcdef012345678901234567\",\r\n    \"totalPrice\": 120.75,\r\n    \"shippingAddress\": \"4567 Elm St, City, Country\",\r\n    \"orderDate\": \"2024-03-30T10:00:00Z\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/orders/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"orders",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Order API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 404 (Not Found)\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"// Test for response structure and content\r",
							"pm.test(\"Delete Order\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"orders"
					]
				}
			},
			"response": []
		}
	]
}