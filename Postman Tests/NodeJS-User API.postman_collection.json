{
	"info": {
		"_postman_id": "31087f6a-2280-4962-84f5-2b071cc81504",
		"name": "NodeJS-User API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33511578"
	},
	"item": [
		{
			"name": "GET User API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get All Users\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.json;\r",
							"\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.be.an(\"array\").and.not.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST User API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 201\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"// Test for response type JSON\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response structure and content\r",
							"pm.test(\"Response should contain user details\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"_id\": \"660dd4af5d70dacd94d27664\",\r\n    \"email\": \"secondunique@example.com\",\r\n    \"password\": \"secondpassword123\",\r\n    \"username\": \"unique_user2\",\r\n    \"purchaseHistory\": [],\r\n    \"shippingAddress\": \"1231 Unique Street\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT User API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 500\r",
							"pm.test(\"Status code is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"// Test for response type JSON\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response structure and content\r",
							"pm.test(\"Response should contain updated user details\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData).to.not.have.property(\"_id\"); // User ID might not be present in the error response\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"Cast to ObjectId failed for value \\\"1\\\" (type string) at path \\\"_id\\\" for model \\\"User\\\"\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"_id\": \"660dd4af5d70dacd94d27664\",\r\n    \"email\": \"updated@example.com\",\r\n    \"password\": \"updatedpassword123\",\r\n    \"username\": \"updated_user\",\r\n    \"purchaseHistory\": [\"order1\", \"order2\"],\r\n    \"shippingAddress\": \"Updated Street 123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/users/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE User API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 500\r",
							"pm.test(\"Status code is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"// Test for response type JSON\r",
							"pm.test(\"Response is of type JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test for response structure and content\r",
							"pm.test(\"Response should contain deleted user details\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"_id\": \"1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8081/users/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8081",
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		}
	]
}